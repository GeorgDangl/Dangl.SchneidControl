//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
  providedIn: 'root',
})
export class ConfigurationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  setTransferStationMode(
    transferStationMode: TransferStationStatus | undefined
  ): Observable<void> {
    let url_ = this.baseUrl + '/api/config/transfer-station-mode?';
    if (transferStationMode === null)
      throw new globalThis.Error(
        "The parameter 'transferStationMode' cannot be null."
      );
    else if (transferStationMode !== undefined)
      url_ +=
        'transferStationMode=' +
        encodeURIComponent('' + transferStationMode) +
        '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSetTransferStationMode(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSetTransferStationMode(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processSetTransferStationMode(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  setTargetBoilerTemperature(
    targetTemperature: number | undefined
  ): Observable<void> {
    let url_ = this.baseUrl + '/api/config/target-boiler-temperature?';
    if (targetTemperature === null)
      throw new globalThis.Error(
        "The parameter 'targetTemperature' cannot be null."
      );
    else if (targetTemperature !== undefined)
      url_ +=
        'targetTemperature=' + encodeURIComponent('' + targetTemperature) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSetTargetBoilerTemperature(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSetTargetBoilerTemperature(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processSetTargetBoilerTemperature(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  setTargetBufferTopTemperature(
    targetTemperature: number | undefined
  ): Observable<void> {
    let url_ = this.baseUrl + '/api/config/target-buffer-temperature?';
    if (targetTemperature === null)
      throw new globalThis.Error(
        "The parameter 'targetTemperature' cannot be null."
      );
    else if (targetTemperature !== undefined)
      url_ +=
        'targetTemperature=' + encodeURIComponent('' + targetTemperature) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSetTargetBufferTopTemperature(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSetTargetBufferTopTemperature(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processSetTargetBufferTopTemperature(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class ConsumptionClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  getStats(
    startTime: Date | null | undefined,
    endTime: Date | null | undefined,
    resolution: ConsumptionResolution | undefined,
    utcTimeZoneOffset: number | undefined
  ): Observable<Consumption> {
    let url_ = this.baseUrl + '/api/consumption?';
    if (startTime !== undefined && startTime !== null)
      url_ +=
        'startTime=' +
        encodeURIComponent(startTime ? '' + startTime.toISOString() : '') +
        '&';
    if (endTime !== undefined && endTime !== null)
      url_ +=
        'endTime=' +
        encodeURIComponent(endTime ? '' + endTime.toISOString() : '') +
        '&';
    if (resolution === null)
      throw new globalThis.Error("The parameter 'resolution' cannot be null.");
    else if (resolution !== undefined)
      url_ += 'resolution=' + encodeURIComponent('' + resolution) + '&';
    if (utcTimeZoneOffset === null)
      throw new globalThis.Error(
        "The parameter 'utcTimeZoneOffset' cannot be null."
      );
    else if (utcTimeZoneOffset !== undefined)
      url_ +=
        'utcTimeZoneOffset=' + encodeURIComponent('' + utcTimeZoneOffset) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetStats(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetStats(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Consumption>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<Consumption>;
        })
      );
  }

  protected processGetStats(
    response: HttpResponseBase
  ): Observable<Consumption> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as Consumption);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class HeatMeterReplacementsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  getHeatMeterReplacements(): Observable<HeatMeterReplacementViewModel[]> {
    let url_ = this.baseUrl + '/api/heat-meter-replacements';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetHeatMeterReplacements(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetHeatMeterReplacements(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<
                HeatMeterReplacementViewModel[]
              >;
            }
          } else
            return _observableThrow(response_) as any as Observable<
              HeatMeterReplacementViewModel[]
            >;
        })
      );
  }

  protected processGetHeatMeterReplacements(
    response: HttpResponseBase
  ): Observable<HeatMeterReplacementViewModel[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as HeatMeterReplacementViewModel[]);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  deleteHeatMeterReplacemenets(
    heatMeterReplacementId: number | undefined
  ): Observable<void> {
    let url_ = this.baseUrl + '/api/heat-meter-replacements?';
    if (heatMeterReplacementId === null)
      throw new globalThis.Error(
        "The parameter 'heatMeterReplacementId' cannot be null."
      );
    else if (heatMeterReplacementId !== undefined)
      url_ +=
        'heatMeterReplacementId=' +
        encodeURIComponent('' + heatMeterReplacementId) +
        '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteHeatMeterReplacemenets(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteHeatMeterReplacemenets(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processDeleteHeatMeterReplacemenets(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as ProblemDetails);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  createHeatMeterReplacemenet(
    createModel: CreateHeatMeterReplacement
  ): Observable<void> {
    let url_ = this.baseUrl + '/api/heat-meter-replacements';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(createModel);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateHeatMeterReplacemenet(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateHeatMeterReplacemenet(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processCreateHeatMeterReplacemenet(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class StatsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  getStats(
    startTime: Date | null | undefined,
    endTime: Date | null | undefined,
    logEntryType: LogEntryType | undefined,
    utcTimeZoneOffset: number | undefined
  ): Observable<Stats> {
    let url_ = this.baseUrl + '/api/stats?';
    if (startTime !== undefined && startTime !== null)
      url_ +=
        'startTime=' +
        encodeURIComponent(startTime ? '' + startTime.toISOString() : '') +
        '&';
    if (endTime !== undefined && endTime !== null)
      url_ +=
        'endTime=' +
        encodeURIComponent(endTime ? '' + endTime.toISOString() : '') +
        '&';
    if (logEntryType === null)
      throw new globalThis.Error(
        "The parameter 'logEntryType' cannot be null."
      );
    else if (logEntryType !== undefined)
      url_ += 'logEntryType=' + encodeURIComponent('' + logEntryType) + '&';
    if (utcTimeZoneOffset === null)
      throw new globalThis.Error(
        "The parameter 'utcTimeZoneOffset' cannot be null."
      );
    else if (utcTimeZoneOffset !== undefined)
      url_ +=
        'utcTimeZoneOffset=' + encodeURIComponent('' + utcTimeZoneOffset) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetStats(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetStats(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Stats>;
            }
          } else return _observableThrow(response_) as any as Observable<Stats>;
        })
      );
  }

  protected processGetStats(response: HttpResponseBase): Observable<Stats> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as Stats);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getExcel(
    startTime: Date | null | undefined,
    endTime: Date | null | undefined,
    logEntryType: LogEntryType | undefined,
    utcTimeZoneOffset: number | undefined
  ): Observable<FileResponse> {
    let url_ = this.baseUrl + '/api/stats/excel?';
    if (startTime !== undefined && startTime !== null)
      url_ +=
        'startTime=' +
        encodeURIComponent(startTime ? '' + startTime.toISOString() : '') +
        '&';
    if (endTime !== undefined && endTime !== null)
      url_ +=
        'endTime=' +
        encodeURIComponent(endTime ? '' + endTime.toISOString() : '') +
        '&';
    if (logEntryType === null)
      throw new globalThis.Error(
        "The parameter 'logEntryType' cannot be null."
      );
    else if (logEntryType !== undefined)
      url_ += 'logEntryType=' + encodeURIComponent('' + logEntryType) + '&';
    if (utcTimeZoneOffset === null)
      throw new globalThis.Error(
        "The parameter 'utcTimeZoneOffset' cannot be null."
      );
    else if (utcTimeZoneOffset !== undefined)
      url_ +=
        'utcTimeZoneOffset=' + encodeURIComponent('' + utcTimeZoneOffset) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/octet-stream',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetExcel(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetExcel(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<FileResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<FileResponse>;
        })
      );
  }

  protected processGetExcel(
    response: HttpResponseBase
  ): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers.get('content-disposition')
        : undefined;
      let fileNameMatch = contentDisposition
        ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(
            contentDisposition
          )
        : undefined;
      let fileName =
        fileNameMatch && fileNameMatch.length > 1
          ? fileNameMatch[3] || fileNameMatch[2]
          : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition
          ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
          : undefined;
        fileName =
          fileNameMatch && fileNameMatch.length > 1
            ? fileNameMatch[1]
            : undefined;
      }
      return _observableOf({
        fileName: fileName,
        data: responseBlob as any,
        status: status,
        headers: _headers,
      });
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getCsv(
    startTime: Date | null | undefined,
    endTime: Date | null | undefined,
    logEntryType: LogEntryType | undefined,
    utcTimeZoneOffset: number | undefined
  ): Observable<FileResponse> {
    let url_ = this.baseUrl + '/api/stats/csv?';
    if (startTime !== undefined && startTime !== null)
      url_ +=
        'startTime=' +
        encodeURIComponent(startTime ? '' + startTime.toISOString() : '') +
        '&';
    if (endTime !== undefined && endTime !== null)
      url_ +=
        'endTime=' +
        encodeURIComponent(endTime ? '' + endTime.toISOString() : '') +
        '&';
    if (logEntryType === null)
      throw new globalThis.Error(
        "The parameter 'logEntryType' cannot be null."
      );
    else if (logEntryType !== undefined)
      url_ += 'logEntryType=' + encodeURIComponent('' + logEntryType) + '&';
    if (utcTimeZoneOffset === null)
      throw new globalThis.Error(
        "The parameter 'utcTimeZoneOffset' cannot be null."
      );
    else if (utcTimeZoneOffset !== undefined)
      url_ +=
        'utcTimeZoneOffset=' + encodeURIComponent('' + utcTimeZoneOffset) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/octet-stream',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetCsv(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetCsv(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<FileResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<FileResponse>;
        })
      );
  }

  protected processGetCsv(
    response: HttpResponseBase
  ): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers.get('content-disposition')
        : undefined;
      let fileNameMatch = contentDisposition
        ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(
            contentDisposition
          )
        : undefined;
      let fileName =
        fileNameMatch && fileNameMatch.length > 1
          ? fileNameMatch[3] || fileNameMatch[2]
          : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition
          ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
          : undefined;
        fileName =
          fileNameMatch && fileNameMatch.length > 1
            ? fileNameMatch[1]
            : undefined;
      }
      return _observableOf({
        fileName: fileName,
        data: responseBlob as any,
        status: status,
        headers: _headers,
      });
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class StatusClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  getStatus(): Observable<Status> {
    let url_ = this.baseUrl + '/api/status';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetStatus(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetStatus(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Status>;
            }
          } else
            return _observableThrow(response_) as any as Observable<Status>;
        })
      );
  }

  protected processGetStatus(response: HttpResponseBase): Observable<Status> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as Status);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class ValuesClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  getOuterTemperature(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/outer-temperature';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetOuterTemperature(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetOuterTemperature(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetOuterTemperature(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getTotalEnergyConsumption(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/total-energy-consumption';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetTotalEnergyConsumption(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetTotalEnergyConsumption(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetTotalEnergyConsumption(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getCurrentHeatingPower(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/heating-power';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetCurrentHeatingPower(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetCurrentHeatingPower(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetCurrentHeatingPower(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getAdvanceTemperature(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/advance-temperature';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAdvanceTemperature(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAdvanceTemperature(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetAdvanceTemperature(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getPrimaryRefluxTemperature(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/primary-reflux-temperature';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetPrimaryRefluxTemperature(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetPrimaryRefluxTemperature(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetPrimaryRefluxTemperature(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getSecondaryRefluxTemperature(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/secondary-reflux-temperature';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetSecondaryRefluxTemperature(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetSecondaryRefluxTemperature(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetSecondaryRefluxTemperature(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getValveOpening(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/valve-opening';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetValveOpening(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetValveOpening(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetValveOpening(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getTransferStationStatus(): Observable<EnumValueOfTransferStationStatus> {
    let url_ = this.baseUrl + '/api/values/transfer-station-status';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetTransferStationStatus(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetTransferStationStatus(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<EnumValueOfTransferStationStatus>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<EnumValueOfTransferStationStatus>;
        })
      );
  }

  protected processGetTransferStationStatus(
    response: HttpResponseBase
  ): Observable<EnumValueOfTransferStationStatus> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as EnumValueOfTransferStationStatus);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getBufferTemperatureTop(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/buffer-temperature-top';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetBufferTemperatureTop(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetBufferTemperatureTop(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetBufferTemperatureTop(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getBufferTemperatureBottom(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/buffer-temperature-bottom';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetBufferTemperatureBottom(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetBufferTemperatureBottom(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetBufferTemperatureBottom(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getBoilerTemperatureTop(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/boiler-temperature-top';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetBoilerTemperatureTop(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetBoilerTemperatureTop(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetBoilerTemperatureTop(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getBoilerTemperatureBottom(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/boiler-temperature-bottom';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetBoilerTemperatureBottom(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetBoilerTemperatureBottom(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetBoilerTemperatureBottom(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getTargetBufferTopTemperature(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/target-buffer-temperature';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetTargetBufferTopTemperature(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetTargetBufferTopTemperature(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetTargetBufferTopTemperature(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getTargetBoilerTemperature(): Observable<DecimalValue> {
    let url_ = this.baseUrl + '/api/values/target-boiler-temperature';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetTargetBoilerTemperature(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetTargetBoilerTemperature(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetTargetBoilerTemperature(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getHeatingCircuitStatus(
    circuitId: number
  ): Observable<EnumValueOfHeatingCircuitStatus> {
    let url_ = this.baseUrl + '/api/values/circuit-status/{circuitId}';
    if (circuitId === undefined || circuitId === null)
      throw new globalThis.Error("The parameter 'circuitId' must be defined.");
    url_ = url_.replace('{circuitId}', encodeURIComponent('' + circuitId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetHeatingCircuitStatus(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetHeatingCircuitStatus(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<EnumValueOfHeatingCircuitStatus>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<EnumValueOfHeatingCircuitStatus>;
        })
      );
  }

  protected processGetHeatingCircuitStatus(
    response: HttpResponseBase
  ): Observable<EnumValueOfHeatingCircuitStatus> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as EnumValueOfHeatingCircuitStatus);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getHeatingCircuitAdvanceTemperature(
    circuitId: number
  ): Observable<DecimalValue> {
    let url_ =
      this.baseUrl + '/api/values/circuit-advance-temperature/{circuitId}';
    if (circuitId === undefined || circuitId === null)
      throw new globalThis.Error("The parameter 'circuitId' must be defined.");
    url_ = url_.replace('{circuitId}', encodeURIComponent('' + circuitId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetHeatingCircuitAdvanceTemperature(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetHeatingCircuitAdvanceTemperature(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(e) as any as Observable<DecimalValue>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DecimalValue>;
        })
      );
  }

  protected processGetHeatingCircuitAdvanceTemperature(
    response: HttpResponseBase
  ): Observable<DecimalValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DecimalValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getPumpStatusHeatingCircuit(pumpId: number): Observable<BoolValue> {
    let url_ = this.baseUrl + '/api/values/pump-status/{pumpId}';
    if (pumpId === undefined || pumpId === null)
      throw new globalThis.Error("The parameter 'pumpId' must be defined.");
    url_ = url_.replace('{pumpId}', encodeURIComponent('' + pumpId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetPumpStatusHeatingCircuit(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetPumpStatusHeatingCircuit(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<BoolValue>;
            }
          } else
            return _observableThrow(response_) as any as Observable<BoolValue>;
        })
      );
  }

  protected processGetPumpStatusHeatingCircuit(
    response: HttpResponseBase
  ): Observable<BoolValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as BoolValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getBoilerLoadingPumpStatus(): Observable<BoolValue> {
    let url_ = this.baseUrl + '/api/values/boiler-loading-pump-status';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetBoilerLoadingPumpStatus(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetBoilerLoadingPumpStatus(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<BoolValue>;
            }
          } else
            return _observableThrow(response_) as any as Observable<BoolValue>;
        })
      );
  }

  protected processGetBoilerLoadingPumpStatus(
    response: HttpResponseBase
  ): Observable<BoolValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as BoolValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  getBufferLoadingPumpStatus(): Observable<BoolValue> {
    let url_ = this.baseUrl + '/api/values/buffer-loading-pump-status';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetBufferLoadingPumpStatus(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetBufferLoadingPumpStatus(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<BoolValue>;
            }
          } else
            return _observableThrow(response_) as any as Observable<BoolValue>;
        })
      );
  }

  protected processGetBufferLoadingPumpStatus(
    response: HttpResponseBase
  ): Observable<BoolValue> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as BoolValue);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

/** Data transfer class to convey api errors */
export interface ApiError {
  /** This dictionary contains a set of all errors and their messages */
  errors?: { [key: string]: string[] } | null;
}

export enum TransferStationStatus {
  OffOrFrostControl = 'OffOrFrostControl',
  OnlyLowering = 'OnlyLowering',
  OnlyHeating = 'OnlyHeating',
  Automatic = 'Automatic',
  OnlyBoiler = 'OnlyBoiler',
  PartyMode = 'PartyMode',
  Maintenance = 'Maintenance',
}

export interface Consumption {
  unit: string;
  startUtc?: Date | null;
  endUtc?: Date | null;
  resolution: ConsumptionResolution;
  entries: ConsumptionDataEntry[];
}

export enum ConsumptionResolution {
  Hourly = 'Hourly',
  Daily = 'Daily',
  Weekly = 'Weekly',
  Monthly = 'Monthly',
  Yearly = 'Yearly',
}

export interface ConsumptionDataEntry {
  createdAtUtc: Date;
  value: number;
}

export interface HeatMeterReplacementViewModel {
  id?: number;
  replacedAtUtc?: Date;
  initialValue?: number;
  oldMeterValue?: number;
}

export interface ProblemDetails {
  type?: string | null;
  title?: string | null;
  status?: number | null;
  detail?: string | null;
  instance?: string | null;

  [key: string]: any;
}

export interface CreateHeatMeterReplacement {
  replacedAtUtc?: Date;
  initialValue?: number;
  oldMeterValue?: number;
}

export interface Stats {
  unit: string;
  logEntryType: LogEntryType;
  startUtc?: Date | null;
  endUtc?: Date | null;
  entries: DataEntry[];
}

export enum LogEntryType {
  OuterTemperature = 'OuterTemperature',
  TotalEnergyConsumption = 'TotalEnergyConsumption',
  HeatingPowerDraw = 'HeatingPowerDraw',
  BufferTemperature = 'BufferTemperature',
  BoilerTemperature = 'BoilerTemperature',
  ValveOpening = 'ValveOpening',
  HeatingCircuit1Pump = 'HeatingCircuit1Pump',
  HeatingCircuit2Pump = 'HeatingCircuit2Pump',
  BoilerLoadingPump = 'BoilerLoadingPump',
  BufferLoadingPump = 'BufferLoadingPump',
  AdvanceTemperature = 'AdvanceTemperature',
  HeatingCircuit1AdvanceTemperature = 'HeatingCircuit1AdvanceTemperature',
  HeatingCircuit2AdvanceTemperature = 'HeatingCircuit2AdvanceTemperature',
}

export interface DataEntry {
  createdAtUtc: Date;
  value: number;
}

export interface Status {
  statsEnabled: boolean;
  environment: string;
  isHealthy: boolean;
}

export interface DecimalValue {
  value: number;
  unit: string;
}

export interface EnumValueOfTransferStationStatus {
  value: TransferStationStatus;
}

export interface EnumValueOfHeatingCircuitStatus {
  value: HeatingCircuitStatus;
}

export enum HeatingCircuitStatus {
  OffOrFrostControl = 'OffOrFrostControl',
  Heating = 'Heating',
  ResidualHeat = 'ResidualHeat',
  Lowering = 'Lowering',
  WarmWaterSubordinate = 'WarmWaterSubordinate',
  FrostControl = 'FrostControl',
  Locked = 'Locked',
  Manual = 'Manual',
  BakeOut = 'BakeOut',
  Voltage = 'Voltage',
  Cooling = 'Cooling',
}

export interface BoolValue {
  value: boolean;
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isSwaggerException = true;

  static isSwaggerException(obj: any): obj is SwaggerException {
    return obj.isSwaggerException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new SwaggerException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
